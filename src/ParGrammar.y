-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGrammar
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsGrammar
import LexGrammar

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&&'      { PT _ (TS _ 4)  }
  '('       { PT _ (TS _ 5)  }
  ')'       { PT _ (TS _ 6)  }
  '*'       { PT _ (TS _ 7)  }
  '+'       { PT _ (TS _ 8)  }
  '++'      { PT _ (TS _ 9)  }
  ','       { PT _ (TS _ 10) }
  '-'       { PT _ (TS _ 11) }
  '--'      { PT _ (TS _ 12) }
  '..'      { PT _ (TS _ 13) }
  '/'       { PT _ (TS _ 14) }
  ':'       { PT _ (TS _ 15) }
  ';'       { PT _ (TS _ 16) }
  '<'       { PT _ (TS _ 17) }
  '<='      { PT _ (TS _ 18) }
  '='       { PT _ (TS _ 19) }
  '=='      { PT _ (TS _ 20) }
  '>'       { PT _ (TS _ 21) }
  '>='      { PT _ (TS _ 22) }
  '?'       { PT _ (TS _ 23) }
  'Boolean' { PT _ (TS _ 24) }
  'Gen'     { PT _ (TS _ 25) }
  'Integer' { PT _ (TS _ 26) }
  'String'  { PT _ (TS _ 27) }
  'Unit'    { PT _ (TS _ 28) }
  '['       { PT _ (TS _ 29) }
  ']'       { PT _ (TS _ 30) }
  'else'    { PT _ (TS _ 31) }
  'false'   { PT _ (TS _ 32) }
  'finally' { PT _ (TS _ 33) }
  'for'     { PT _ (TS _ 34) }
  'fun'     { PT _ (TS _ 35) }
  'if'      { PT _ (TS _ 36) }
  'in'      { PT _ (TS _ 37) }
  'new'     { PT _ (TS _ 38) }
  'return'  { PT _ (TS _ 39) }
  'true'    { PT _ (TS _ 40) }
  'val'     { PT _ (TS _ 41) }
  'var'     { PT _ (TS _ 42) }
  'while'   { PT _ (TS _ 43) }
  'yield'   { PT _ (TS _ 44) }
  '{'       { PT _ (TS _ 45) }
  '||'      { PT _ (TS _ 46) }
  '}'       { PT _ (TS _ 47) }
  L_Ident   { PT _ (TV _)    }
  L_integ   { PT _ (TI _)    }
  L_quoted  { PT _ (TL _)    }

%%

Ident :: { (AbsGrammar.BNFC'Position, AbsGrammar.Ident) }
Ident  : L_Ident { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.Ident (tokenText $1)) }

Integer :: { (AbsGrammar.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (AbsGrammar.BNFC'Position, String) }
String   : L_quoted { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (AbsGrammar.BNFC'Position, AbsGrammar.Program) }
Program
  : ListInstr { (fst $1, AbsGrammar.PProgram (fst $1) (snd $1)) }

Instr :: { (AbsGrammar.BNFC'Position, AbsGrammar.Instr) }
Instr
  : 'fun' Ident '(' ListArg ')' ':' Type Block { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.DFun (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $7) (snd $8)) }
  | ';' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IUnit (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | Ident '++' ';' { (fst $1, AbsGrammar.IIncr (fst $1) (snd $1)) }
  | Ident '--' ';' { (fst $1, AbsGrammar.IDecr (fst $1) (snd $1)) }
  | Ident '=' Expr ';' { (fst $1, AbsGrammar.IAss (fst $1) (snd $1) (snd $3)) }
  | 'return' Expr ';' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IRet (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'return' ';' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IRetUnit (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | 'yield' Expr ';' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IYield (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'yield' ';' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IYieldUnit (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | 'if' Expr Block { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IIf (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'if' Expr Block 'else' Block { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IIfElse (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5)) }
  | 'while' Expr Block { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IWhile (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'while' Expr Block 'finally' Block { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IWhileFin (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5)) }
  | 'for' Ident '=' Expr '..' Expr Block { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IFor (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6) (snd $7)) }
  | 'for' Ident 'in' Expr Block { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IForGen (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | Expr ';' { (fst $1, AbsGrammar.IExpr (fst $1) (snd $1)) }
  | Decl ';' { (fst $1, AbsGrammar.IDecl (fst $1) (snd $1)) }

Arg :: { (AbsGrammar.BNFC'Position, AbsGrammar.Arg) }
Arg
  : 'var' Ident ':' Type { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.RefMutArg (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'val' Ident ':' Type { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.RefConstArg (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'var' Ident ':' 'new' Type { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.CopyMutArg (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }
  | 'val' Ident ':' 'new' Type { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.CopyConstArg (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }

ListArg :: { (AbsGrammar.BNFC'Position, [AbsGrammar.Arg]) }
ListArg
  : {- empty -} { (AbsGrammar.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Item :: { (AbsGrammar.BNFC'Position, AbsGrammar.Item) }
Item
  : Ident ':' Type '=' Expr { (fst $1, AbsGrammar.DItemVal (fst $1) (snd $1) (snd $3) (snd $5)) }
  | Ident ':' Type { (fst $1, AbsGrammar.DItem (fst $1) (snd $1) (snd $3)) }

ListItem :: { (AbsGrammar.BNFC'Position, [AbsGrammar.Item]) }
ListItem
  : {- empty -} { (AbsGrammar.BNFC'NoPosition, []) }
  | Item { (fst $1, (:[]) (snd $1)) }
  | Item ',' ListItem { (fst $1, (:) (snd $1) (snd $3)) }

Decl :: { (AbsGrammar.BNFC'Position, AbsGrammar.Decl) }
Decl
  : 'var' ListItem { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.DVar (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'val' ListItem { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.DVal (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Block :: { (AbsGrammar.BNFC'Position, AbsGrammar.Block) }
Block
  : '{' ListInstr '}' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.IBlock (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListInstr :: { (AbsGrammar.BNFC'Position, [AbsGrammar.Instr]) }
ListInstr
  : {- empty -} { (AbsGrammar.BNFC'NoPosition, []) }
  | Instr ListInstr { (fst $1, (:) (snd $1) (snd $2)) }

Type :: { (AbsGrammar.BNFC'Position, AbsGrammar.Type) }
Type
  : 'Integer' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.TInt (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | 'Boolean' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.TBool (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | 'String' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.TString (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | 'Gen' '[' Type ']' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.TGen (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1)) (snd $3)) }
  | 'Unit' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.TVoid (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }

PlsOp :: { (AbsGrammar.BNFC'Position, AbsGrammar.PlsOp) }
PlsOp
  : '+' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.OPlus (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.OMinus (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (AbsGrammar.BNFC'Position, AbsGrammar.MulOp) }
MulOp
  : '*' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.OMul (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.ODiv (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.OMod (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }

NotOp :: { (AbsGrammar.BNFC'Position, AbsGrammar.NotOp) }
NotOp
  : '!' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.ONot (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }

NegOp :: { (AbsGrammar.BNFC'Position, AbsGrammar.NegOp) }
NegOp
  : '-' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.ONeg (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }

AndOp :: { (AbsGrammar.BNFC'Position, AbsGrammar.AndOp) }
AndOp
  : '&&' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.OAnd (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }

OrOp :: { (AbsGrammar.BNFC'Position, AbsGrammar.OrOp) }
OrOp
  : '||' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.OOr (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (AbsGrammar.BNFC'Position, AbsGrammar.RelOp) }
RelOp
  : '==' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.REq (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.RNeq (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | '<' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.RLt (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.RGt (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.RLeq (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.RGeq (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }

Expr6 :: { (AbsGrammar.BNFC'Position, AbsGrammar.Expr) }
Expr6
  : Ident { (fst $1, AbsGrammar.EVarName (fst $1) (snd $1)) }
  | Integer { (fst $1, AbsGrammar.EIntLit (fst $1) (snd $1)) }
  | 'true' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.EBoolLitTrue (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), AbsGrammar.EBoolLitFalse (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1))) }
  | Ident '(' ListExpr ')' { (fst $1, AbsGrammar.ERun (fst $1) (snd $1) (snd $3)) }
  | String { (fst $1, AbsGrammar.EStringLit (fst $1) (snd $1)) }
  | '(' Expr ')' { (uncurry AbsGrammar.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr5 :: { (AbsGrammar.BNFC'Position, AbsGrammar.Expr) }
Expr5
  : NegOp Expr6 { (fst $1, AbsGrammar.ENeg (fst $1) (snd $1) (snd $2)) }
  | NotOp Expr6 { (fst $1, AbsGrammar.ENot (fst $1) (snd $1) (snd $2)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (AbsGrammar.BNFC'Position, AbsGrammar.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, AbsGrammar.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (AbsGrammar.BNFC'Position, AbsGrammar.Expr) }
Expr3
  : Expr3 PlsOp Expr4 { (fst $1, AbsGrammar.ESum (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (AbsGrammar.BNFC'Position, AbsGrammar.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, AbsGrammar.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (AbsGrammar.BNFC'Position, AbsGrammar.Expr) }
Expr1
  : Expr2 AndOp Expr1 { (fst $1, AbsGrammar.EBAnd (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr :: { (AbsGrammar.BNFC'Position, AbsGrammar.Expr) }
Expr
  : Expr1 OrOp Expr { (fst $1, AbsGrammar.EBOr (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr1 '?' Expr1 ':' Expr { (fst $1, AbsGrammar.ETer (fst $1) (snd $1) (snd $3) (snd $5)) }
  | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (AbsGrammar.BNFC'Position, [AbsGrammar.Expr]) }
ListExpr
  : {- empty -} { (AbsGrammar.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err AbsGrammar.Program
pProgram = fmap snd . pProgram_internal
}

