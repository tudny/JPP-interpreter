-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammar.Ident -> Result
transIdent x = case x of
  AbsGrammar.Ident string -> failure x

transProgram :: Show a => AbsGrammar.Program' a -> Result
transProgram x = case x of
  AbsGrammar.PProgram _ instrs -> failure x

transInstr :: Show a => AbsGrammar.Instr' a -> Result
transInstr x = case x of
  AbsGrammar.DFun _ ident args type_ block -> failure x
  AbsGrammar.IUnit _ -> failure x
  AbsGrammar.IIncr _ ident -> failure x
  AbsGrammar.IDecr _ ident -> failure x
  AbsGrammar.IAss _ ident expr -> failure x
  AbsGrammar.IRet _ expr -> failure x
  AbsGrammar.IRetUnit _ -> failure x
  AbsGrammar.IYield _ expr -> failure x
  AbsGrammar.IYieldUnit _ -> failure x
  AbsGrammar.IIf _ expr block -> failure x
  AbsGrammar.IIfElse _ expr block1 block2 -> failure x
  AbsGrammar.IWhile _ expr block -> failure x
  AbsGrammar.IWhileFin _ expr block1 block2 -> failure x
  AbsGrammar.IFor _ ident expr1 expr2 block -> failure x
  AbsGrammar.IForGen _ ident expr block -> failure x
  AbsGrammar.IExpr _ expr -> failure x
  AbsGrammar.IDecl _ decl -> failure x

transArg :: Show a => AbsGrammar.Arg' a -> Result
transArg x = case x of
  AbsGrammar.RefMutArg _ ident type_ -> failure x
  AbsGrammar.RefConstArg _ ident type_ -> failure x
  AbsGrammar.CopyMutArg _ ident type_ -> failure x
  AbsGrammar.CopyConstArg _ ident type_ -> failure x

transItem :: Show a => AbsGrammar.Item' a -> Result
transItem x = case x of
  AbsGrammar.DItemVal _ ident type_ expr -> failure x
  AbsGrammar.DItem _ ident type_ -> failure x

transDecl :: Show a => AbsGrammar.Decl' a -> Result
transDecl x = case x of
  AbsGrammar.DVar _ items -> failure x
  AbsGrammar.DVal _ items -> failure x

transBlock :: Show a => AbsGrammar.Block' a -> Result
transBlock x = case x of
  AbsGrammar.IBlock _ instrs -> failure x

transType :: Show a => AbsGrammar.Type' a -> Result
transType x = case x of
  AbsGrammar.TInt _ -> failure x
  AbsGrammar.TBool _ -> failure x
  AbsGrammar.TString _ -> failure x
  AbsGrammar.TGen _ type_ -> failure x
  AbsGrammar.TVoid _ -> failure x

transPlsOp :: Show a => AbsGrammar.PlsOp' a -> Result
transPlsOp x = case x of
  AbsGrammar.OPlus _ -> failure x
  AbsGrammar.OMinus _ -> failure x

transMulOp :: Show a => AbsGrammar.MulOp' a -> Result
transMulOp x = case x of
  AbsGrammar.OMul _ -> failure x
  AbsGrammar.ODiv _ -> failure x
  AbsGrammar.OMod _ -> failure x

transNotOp :: Show a => AbsGrammar.NotOp' a -> Result
transNotOp x = case x of
  AbsGrammar.ONot _ -> failure x

transNegOp :: Show a => AbsGrammar.NegOp' a -> Result
transNegOp x = case x of
  AbsGrammar.ONeg _ -> failure x

transAndOp :: Show a => AbsGrammar.AndOp' a -> Result
transAndOp x = case x of
  AbsGrammar.OAnd _ -> failure x

transOrOp :: Show a => AbsGrammar.OrOp' a -> Result
transOrOp x = case x of
  AbsGrammar.OOr _ -> failure x

transRelOp :: Show a => AbsGrammar.RelOp' a -> Result
transRelOp x = case x of
  AbsGrammar.REq _ -> failure x
  AbsGrammar.RNeq _ -> failure x
  AbsGrammar.RLt _ -> failure x
  AbsGrammar.RGt _ -> failure x
  AbsGrammar.RLeq _ -> failure x
  AbsGrammar.RGeq _ -> failure x

transExpr :: Show a => AbsGrammar.Expr' a -> Result
transExpr x = case x of
  AbsGrammar.EVarName _ ident -> failure x
  AbsGrammar.EIntLit _ integer -> failure x
  AbsGrammar.EBoolLitTrue _ -> failure x
  AbsGrammar.EBoolLitFalse _ -> failure x
  AbsGrammar.ERun _ ident exprs -> failure x
  AbsGrammar.EStringLit _ string -> failure x
  AbsGrammar.ENeg _ negop expr -> failure x
  AbsGrammar.ENot _ notop expr -> failure x
  AbsGrammar.EMul _ expr1 mulop expr2 -> failure x
  AbsGrammar.ESum _ expr1 plsop expr2 -> failure x
  AbsGrammar.ERel _ expr1 relop expr2 -> failure x
  AbsGrammar.EBAnd _ expr1 andop expr2 -> failure x
  AbsGrammar.EBOr _ expr1 orop expr2 -> failure x
  AbsGrammar.ETer _ expr1 expr2 expr3 -> failure x
