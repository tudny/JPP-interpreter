-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintGrammar.

module PrintGrammar where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified AbsGrammar

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsGrammar.Ident where
  prt _ (AbsGrammar.Ident i) = doc $ showString i
instance Print (AbsGrammar.Program' a) where
  prt i = \case
    AbsGrammar.PProgram _ instrs -> prPrec i 0 (concatD [prt 0 instrs])

instance Print (AbsGrammar.Instr' a) where
  prt i = \case
    AbsGrammar.DFun _ id_ args type_ block -> prPrec i 0 (concatD [doc (showString "fun"), prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString ":"), prt 0 type_, prt 0 block])
    AbsGrammar.IUnit _ -> prPrec i 0 (concatD [doc (showString ";")])
    AbsGrammar.IIncr _ id_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString "++"), doc (showString ";")])
    AbsGrammar.IDecr _ id_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString "--"), doc (showString ";")])
    AbsGrammar.IAss _ id_ expr -> prPrec i 0 (concatD [prt 0 id_, doc (showString "="), prt 0 expr, doc (showString ";")])
    AbsGrammar.IRet _ expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    AbsGrammar.IRetUnit _ -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    AbsGrammar.IYield _ expr -> prPrec i 0 (concatD [doc (showString "yield"), prt 0 expr, doc (showString ";")])
    AbsGrammar.IYieldUnit _ -> prPrec i 0 (concatD [doc (showString "yield"), doc (showString ";")])
    AbsGrammar.IIf _ expr block -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr, prt 0 block])
    AbsGrammar.IIfElse _ expr block1 block2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr, prt 0 block1, doc (showString "else"), prt 0 block2])
    AbsGrammar.IWhile _ expr block -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expr, prt 0 block])
    AbsGrammar.IWhileFin _ expr block1 block2 -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expr, prt 0 block1, doc (showString "finally"), prt 0 block2])
    AbsGrammar.IFor _ id_ expr1 expr2 block -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id_, doc (showString "="), prt 0 expr1, doc (showString ".."), prt 0 expr2, prt 0 block])
    AbsGrammar.IForGen _ id_ expr block -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id_, doc (showString "in"), prt 0 expr, prt 0 block])
    AbsGrammar.IExpr _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    AbsGrammar.IDecl _ decl -> prPrec i 0 (concatD [prt 0 decl, doc (showString ";")])

instance Print (AbsGrammar.Arg' a) where
  prt i = \case
    AbsGrammar.RefMutArg _ id_ type_ -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id_, doc (showString ":"), prt 0 type_])
    AbsGrammar.RefConstArg _ id_ type_ -> prPrec i 0 (concatD [doc (showString "val"), prt 0 id_, doc (showString ":"), prt 0 type_])
    AbsGrammar.CopyMutArg _ id_ type_ -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id_, doc (showString ":"), doc (showString "new"), prt 0 type_])
    AbsGrammar.CopyConstArg _ id_ type_ -> prPrec i 0 (concatD [doc (showString "val"), prt 0 id_, doc (showString ":"), doc (showString "new"), prt 0 type_])

instance Print [AbsGrammar.Arg' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (AbsGrammar.Item' a) where
  prt i = \case
    AbsGrammar.DItemVal _ id_ type_ expr -> prPrec i 0 (concatD [prt 0 id_, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 expr])
    AbsGrammar.DItem _ id_ type_ -> prPrec i 0 (concatD [prt 0 id_, doc (showString ":"), prt 0 type_])

instance Print [AbsGrammar.Item' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (AbsGrammar.Decl' a) where
  prt i = \case
    AbsGrammar.DVar _ items -> prPrec i 0 (concatD [doc (showString "var"), prt 0 items])
    AbsGrammar.DVal _ items -> prPrec i 0 (concatD [doc (showString "val"), prt 0 items])

instance Print (AbsGrammar.Block' a) where
  prt i = \case
    AbsGrammar.IBlock _ instrs -> prPrec i 0 (concatD [doc (showString "{"), prt 0 instrs, doc (showString "}")])

instance Print [AbsGrammar.Instr' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsGrammar.Type' a) where
  prt i = \case
    AbsGrammar.TInt _ -> prPrec i 0 (concatD [doc (showString "Integer")])
    AbsGrammar.TBool _ -> prPrec i 0 (concatD [doc (showString "Boolean")])
    AbsGrammar.TString _ -> prPrec i 0 (concatD [doc (showString "String")])
    AbsGrammar.TGen _ type_ -> prPrec i 0 (concatD [doc (showString "Gen"), doc (showString "["), prt 0 type_, doc (showString "]")])
    AbsGrammar.TVoid _ -> prPrec i 0 (concatD [doc (showString "Unit")])

instance Print (AbsGrammar.PlsOp' a) where
  prt i = \case
    AbsGrammar.OPlus _ -> prPrec i 0 (concatD [doc (showString "+")])
    AbsGrammar.OMinus _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (AbsGrammar.MulOp' a) where
  prt i = \case
    AbsGrammar.OMul _ -> prPrec i 0 (concatD [doc (showString "*")])
    AbsGrammar.ODiv _ -> prPrec i 0 (concatD [doc (showString "/")])
    AbsGrammar.OMod _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (AbsGrammar.NotOp' a) where
  prt i = \case
    AbsGrammar.ONot _ -> prPrec i 0 (concatD [doc (showString "!")])

instance Print (AbsGrammar.NegOp' a) where
  prt i = \case
    AbsGrammar.ONeg _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (AbsGrammar.AndOp' a) where
  prt i = \case
    AbsGrammar.OAnd _ -> prPrec i 0 (concatD [doc (showString "&&")])

instance Print (AbsGrammar.OrOp' a) where
  prt i = \case
    AbsGrammar.OOr _ -> prPrec i 0 (concatD [doc (showString "||")])

instance Print (AbsGrammar.RelOp' a) where
  prt i = \case
    AbsGrammar.REq _ -> prPrec i 0 (concatD [doc (showString "==")])
    AbsGrammar.RNeq _ -> prPrec i 0 (concatD [doc (showString "!=")])
    AbsGrammar.RLt _ -> prPrec i 0 (concatD [doc (showString "<")])
    AbsGrammar.RGt _ -> prPrec i 0 (concatD [doc (showString ">")])
    AbsGrammar.RLeq _ -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsGrammar.RGeq _ -> prPrec i 0 (concatD [doc (showString ">=")])

instance Print (AbsGrammar.Expr' a) where
  prt i = \case
    AbsGrammar.EVarName _ id_ -> prPrec i 6 (concatD [prt 0 id_])
    AbsGrammar.EIntLit _ n -> prPrec i 6 (concatD [prt 0 n])
    AbsGrammar.EBoolLitTrue _ -> prPrec i 6 (concatD [doc (showString "true")])
    AbsGrammar.EBoolLitFalse _ -> prPrec i 6 (concatD [doc (showString "false")])
    AbsGrammar.ERun _ id_ exprs -> prPrec i 6 (concatD [prt 0 id_, doc (showString "("), prt 0 exprs, doc (showString ")")])
    AbsGrammar.EStringLit _ str -> prPrec i 6 (concatD [printString str])
    AbsGrammar.ENeg _ negop expr -> prPrec i 5 (concatD [prt 0 negop, prt 6 expr])
    AbsGrammar.ENot _ notop expr -> prPrec i 5 (concatD [prt 0 notop, prt 6 expr])
    AbsGrammar.EMul _ expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    AbsGrammar.ESum _ expr1 plsop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 plsop, prt 4 expr2])
    AbsGrammar.ERel _ expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    AbsGrammar.EBAnd _ expr1 andop expr2 -> prPrec i 1 (concatD [prt 2 expr1, prt 0 andop, prt 1 expr2])
    AbsGrammar.EBOr _ expr1 orop expr2 -> prPrec i 0 (concatD [prt 1 expr1, prt 0 orop, prt 0 expr2])
    AbsGrammar.ETer _ expr1 expr2 expr3 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "?"), prt 1 expr2, doc (showString ":"), prt 0 expr3])

instance Print [AbsGrammar.Expr' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
