-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Src.Jabba.Par
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified Src.Jabba.Abs
import Src.Jabba.Lex

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&&'      { PT _ (TS _ 4)  }
  '('       { PT _ (TS _ 5)  }
  ')'       { PT _ (TS _ 6)  }
  '*'       { PT _ (TS _ 7)  }
  '+'       { PT _ (TS _ 8)  }
  '++'      { PT _ (TS _ 9)  }
  ','       { PT _ (TS _ 10) }
  '-'       { PT _ (TS _ 11) }
  '--'      { PT _ (TS _ 12) }
  '..'      { PT _ (TS _ 13) }
  '/'       { PT _ (TS _ 14) }
  ':'       { PT _ (TS _ 15) }
  ';'       { PT _ (TS _ 16) }
  '<'       { PT _ (TS _ 17) }
  '<='      { PT _ (TS _ 18) }
  '='       { PT _ (TS _ 19) }
  '=='      { PT _ (TS _ 20) }
  '>'       { PT _ (TS _ 21) }
  '>='      { PT _ (TS _ 22) }
  '?'       { PT _ (TS _ 23) }
  'Boolean' { PT _ (TS _ 24) }
  'Gen'     { PT _ (TS _ 25) }
  'Integer' { PT _ (TS _ 26) }
  'String'  { PT _ (TS _ 27) }
  'Unit'    { PT _ (TS _ 28) }
  '['       { PT _ (TS _ 29) }
  ']'       { PT _ (TS _ 30) }
  'else'    { PT _ (TS _ 31) }
  'false'   { PT _ (TS _ 32) }
  'finally' { PT _ (TS _ 33) }
  'for'     { PT _ (TS _ 34) }
  'fun'     { PT _ (TS _ 35) }
  'if'      { PT _ (TS _ 36) }
  'in'      { PT _ (TS _ 37) }
  'new'     { PT _ (TS _ 38) }
  'return'  { PT _ (TS _ 39) }
  'true'    { PT _ (TS _ 40) }
  'val'     { PT _ (TS _ 41) }
  'var'     { PT _ (TS _ 42) }
  'while'   { PT _ (TS _ 43) }
  'yield'   { PT _ (TS _ 44) }
  '{'       { PT _ (TS _ 45) }
  '||'      { PT _ (TS _ 46) }
  '}'       { PT _ (TS _ 47) }
  L_Ident   { PT _ (TV $$)   }
  L_integ   { PT _ (TI $$)   }
  L_quoted  { PT _ (TL $$)   }

%%

Ident :: { Src.Jabba.Abs.Ident }
Ident  : L_Ident { Src.Jabba.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { Src.Jabba.Abs.Program }
Program : ListInstr { Src.Jabba.Abs.PProgram $1 }

Instr :: { Src.Jabba.Abs.Instr }
Instr
  : 'fun' Ident '(' ListArg ')' ':' Type Block { Src.Jabba.Abs.DFun $2 $4 $7 $8 }
  | ';' { Src.Jabba.Abs.IUnit }
  | Ident '++' ';' { Src.Jabba.Abs.IIncr $1 }
  | Ident '--' ';' { Src.Jabba.Abs.IDecr $1 }
  | Ident '=' Expr ';' { Src.Jabba.Abs.IAss $1 $3 }
  | 'return' Expr ';' { Src.Jabba.Abs.IRet $2 }
  | 'return' ';' { Src.Jabba.Abs.IRetUnit }
  | 'yield' Expr ';' { Src.Jabba.Abs.IYield $2 }
  | 'yield' ';' { Src.Jabba.Abs.IYieldUnit }
  | 'if' Expr Block { Src.Jabba.Abs.IIf $2 $3 }
  | 'if' Expr Block 'else' Block { Src.Jabba.Abs.IIfElse $2 $3 $5 }
  | 'while' Expr Block { Src.Jabba.Abs.IWhile $2 $3 }
  | 'while' Expr Block 'finally' Block { Src.Jabba.Abs.IWhileFin $2 $3 $5 }
  | 'for' Ident '=' Expr '..' Expr Block { Src.Jabba.Abs.IFor $2 $4 $6 $7 }
  | 'for' Ident 'in' Expr Block { Src.Jabba.Abs.IForGen $2 $4 $5 }
  | Expr ';' { Src.Jabba.Abs.IExpr $1 }
  | Decl ';' { Src.Jabba.Abs.IDecl $1 }

Arg :: { Src.Jabba.Abs.Arg }
Arg
  : 'var' Ident ':' Type { Src.Jabba.Abs.RefMutArg $2 $4 }
  | 'val' Ident ':' Type { Src.Jabba.Abs.RefConstArg $2 $4 }
  | 'var' Ident ':' 'new' Type { Src.Jabba.Abs.CopyMutArg $2 $5 }
  | 'val' Ident ':' 'new' Type { Src.Jabba.Abs.CopyConstArg $2 $5 }

ListArg :: { [Src.Jabba.Abs.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Item :: { Src.Jabba.Abs.Item }
Item
  : Ident ':' Type '=' Expr { Src.Jabba.Abs.DItemVal $1 $3 $5 }
  | Ident ':' Type { Src.Jabba.Abs.DItem $1 $3 }

ListItem :: { [Src.Jabba.Abs.Item] }
ListItem
  : {- empty -} { [] }
  | Item { (:[]) $1 }
  | Item ',' ListItem { (:) $1 $3 }

Decl :: { Src.Jabba.Abs.Decl }
Decl
  : 'var' ListItem { Src.Jabba.Abs.DVar $2 }
  | 'val' ListItem { Src.Jabba.Abs.DVal $2 }

Block :: { Src.Jabba.Abs.Block }
Block : '{' ListInstr '}' { Src.Jabba.Abs.IBlock $2 }

ListInstr :: { [Src.Jabba.Abs.Instr] }
ListInstr : {- empty -} { [] } | Instr ListInstr { (:) $1 $2 }

Type :: { Src.Jabba.Abs.Type }
Type
  : 'Integer' { Src.Jabba.Abs.TInt }
  | 'Boolean' { Src.Jabba.Abs.TBool }
  | 'String' { Src.Jabba.Abs.TString }
  | 'Gen' '[' Type ']' { Src.Jabba.Abs.TGen $3 }
  | 'Unit' { Src.Jabba.Abs.TVoid }

PlsOp :: { Src.Jabba.Abs.PlsOp }
PlsOp : '+' { Src.Jabba.Abs.OPlus } | '-' { Src.Jabba.Abs.OMinus }

MulOp :: { Src.Jabba.Abs.MulOp }
MulOp
  : '*' { Src.Jabba.Abs.OMul }
  | '/' { Src.Jabba.Abs.ODiv }
  | '%' { Src.Jabba.Abs.OMod }

NotOp :: { Src.Jabba.Abs.NotOp }
NotOp : '!' { Src.Jabba.Abs.ONot }

NegOp :: { Src.Jabba.Abs.NegOp }
NegOp : '-' { Src.Jabba.Abs.ONeg }

AndOp :: { Src.Jabba.Abs.AndOp }
AndOp : '&&' { Src.Jabba.Abs.OAnd }

OrOp :: { Src.Jabba.Abs.OrOp }
OrOp : '||' { Src.Jabba.Abs.OOr }

RelOp :: { Src.Jabba.Abs.RelOp }
RelOp
  : '==' { Src.Jabba.Abs.REq }
  | '!=' { Src.Jabba.Abs.RNeq }
  | '<' { Src.Jabba.Abs.RLt }
  | '>' { Src.Jabba.Abs.RGt }
  | '<=' { Src.Jabba.Abs.RLeq }
  | '>=' { Src.Jabba.Abs.RGeq }

Expr6 :: { Src.Jabba.Abs.Expr }
Expr6
  : Ident { Src.Jabba.Abs.EVarName $1 }
  | Integer { Src.Jabba.Abs.EIntLit $1 }
  | 'true' { Src.Jabba.Abs.EBoolLitTrue }
  | 'false' { Src.Jabba.Abs.EBoolLitFalse }
  | Ident '(' ListExpr ')' { Src.Jabba.Abs.ERun $1 $3 }
  | String { Src.Jabba.Abs.EStringLit $1 }
  | '(' Expr ')' { $2 }

Expr5 :: { Src.Jabba.Abs.Expr }
Expr5
  : NegOp Expr6 { Src.Jabba.Abs.ENeg $1 $2 }
  | NotOp Expr6 { Src.Jabba.Abs.ENot $1 $2 }
  | Expr6 { $1 }

Expr4 :: { Src.Jabba.Abs.Expr }
Expr4
  : Expr4 MulOp Expr5 { Src.Jabba.Abs.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { Src.Jabba.Abs.Expr }
Expr3
  : Expr3 PlsOp Expr4 { Src.Jabba.Abs.ESum $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { Src.Jabba.Abs.Expr }
Expr2
  : Expr2 RelOp Expr3 { Src.Jabba.Abs.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { Src.Jabba.Abs.Expr }
Expr1
  : Expr2 AndOp Expr1 { Src.Jabba.Abs.EBAnd $1 $2 $3 } | Expr2 { $1 }

Expr :: { Src.Jabba.Abs.Expr }
Expr
  : Expr1 OrOp Expr { Src.Jabba.Abs.EBOr $1 $2 $3 }
  | Expr1 '?' Expr1 ':' Expr { Src.Jabba.Abs.ETer $1 $3 $5 }
  | Expr1 { $1 }

ListExpr :: { [Src.Jabba.Abs.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

