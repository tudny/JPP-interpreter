-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Src/Jabba/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Program -> ListInstr                               (4)
	Instr -> 'fun' Ident '(' ListArg ')' ':' Type Block   (5)
	Instr -> ';'                                       (6)
	Instr -> Ident '++' ';'                            (7)
	Instr -> Ident '--' ';'                            (8)
	Instr -> Ident '=' Expr ';'                        (9)
	Instr -> 'return' Expr ';'                         (10)
	Instr -> 'return' ';'                              (11)
	Instr -> 'yield' Expr ';'                          (12)
	Instr -> 'yield' ';'                               (13)
	Instr -> 'if' Expr Block                           (14)
	Instr -> 'if' Expr Block 'else' Block              (15)
	Instr -> 'while' Expr Block                        (16)
	Instr -> 'while' Expr Block 'finally' Block        (17)
	Instr -> 'for' Ident '=' Expr '..' Expr Block      (18)
	Instr -> 'for' Ident 'in' Expr Block               (19)
	Instr -> Expr ';'                                  (20)
	Instr -> Decl ';'                                  (21)
	Arg -> 'var' Ident ':' Type                        (22)
	Arg -> 'val' Ident ':' Type                        (23)
	Arg -> 'var' Ident ':' 'new' Type                  (24)
	Arg -> 'val' Ident ':' 'new' Type                  (25)
	ListArg ->                                         (26)
	ListArg -> Arg                                     (27)
	ListArg -> Arg ',' ListArg                         (28)
	Item -> Ident ':' Type '=' Expr                    (29)
	Item -> Ident ':' Type                             (30)
	ListItem ->                                        (31)
	ListItem -> Item                                   (32)
	ListItem -> Item ',' ListItem                      (33)
	Decl -> 'var' ListItem                             (34)
	Decl -> 'val' ListItem                             (35)
	Block -> '{' ListInstr '}'                         (36)
	ListInstr ->                                       (37)
	ListInstr -> Instr ListInstr                       (38)
	Type -> 'Integer'                                  (39)
	Type -> 'Boolean'                                  (40)
	Type -> 'String'                                   (41)
	Type -> 'Gen' '[' Type ']'                         (42)
	Type -> 'Unit'                                     (43)
	PlsOp -> '+'                                       (44)
	PlsOp -> '-'                                       (45)
	MulOp -> '*'                                       (46)
	MulOp -> '/'                                       (47)
	MulOp -> '%'                                       (48)
	NotOp -> '!'                                       (49)
	NegOp -> '-'                                       (50)
	AndOp -> '&&'                                      (51)
	OrOp -> '||'                                       (52)
	RelOp -> '=='                                      (53)
	RelOp -> '!='                                      (54)
	RelOp -> '<'                                       (55)
	RelOp -> '>'                                       (56)
	RelOp -> '<='                                      (57)
	RelOp -> '>='                                      (58)
	Expr6 -> Ident                                     (59)
	Expr6 -> Integer                                   (60)
	Expr6 -> 'true'                                    (61)
	Expr6 -> 'false'                                   (62)
	Expr6 -> Ident '(' ListExpr ')'                    (63)
	Expr6 -> String                                    (64)
	Expr6 -> '(' Expr ')'                              (65)
	Expr5 -> NegOp Expr6                               (66)
	Expr5 -> NotOp Expr6                               (67)
	Expr5 -> Expr6                                     (68)
	Expr4 -> Expr4 MulOp Expr5                         (69)
	Expr4 -> Expr5                                     (70)
	Expr3 -> Expr3 PlsOp Expr4                         (71)
	Expr3 -> Expr4                                     (72)
	Expr2 -> Expr2 RelOp Expr3                         (73)
	Expr2 -> Expr3                                     (74)
	Expr1 -> Expr2 AndOp Expr1                         (75)
	Expr1 -> Expr2                                     (76)
	Expr -> Expr1 OrOp Expr                            (77)
	Expr -> Expr1 '?' Expr1 ':' Expr                   (78)
	Expr -> Expr1                                      (79)
	ListExpr ->                                        (80)
	ListExpr -> Expr                                   (81)
	ListExpr -> Expr ',' ListExpr                      (82)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'&&'           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	'++'           { PT _ (TS _ 9) }
	','            { PT _ (TS _ 10) }
	'-'            { PT _ (TS _ 11) }
	'--'           { PT _ (TS _ 12) }
	'..'           { PT _ (TS _ 13) }
	'/'            { PT _ (TS _ 14) }
	':'            { PT _ (TS _ 15) }
	';'            { PT _ (TS _ 16) }
	'<'            { PT _ (TS _ 17) }
	'<='           { PT _ (TS _ 18) }
	'='            { PT _ (TS _ 19) }
	'=='           { PT _ (TS _ 20) }
	'>'            { PT _ (TS _ 21) }
	'>='           { PT _ (TS _ 22) }
	'?'            { PT _ (TS _ 23) }
	'Boolean'      { PT _ (TS _ 24) }
	'Gen'          { PT _ (TS _ 25) }
	'Integer'      { PT _ (TS _ 26) }
	'String'       { PT _ (TS _ 27) }
	'Unit'         { PT _ (TS _ 28) }
	'['            { PT _ (TS _ 29) }
	']'            { PT _ (TS _ 30) }
	'else'         { PT _ (TS _ 31) }
	'false'        { PT _ (TS _ 32) }
	'finally'      { PT _ (TS _ 33) }
	'for'          { PT _ (TS _ 34) }
	'fun'          { PT _ (TS _ 35) }
	'if'           { PT _ (TS _ 36) }
	'in'           { PT _ (TS _ 37) }
	'new'          { PT _ (TS _ 38) }
	'return'       { PT _ (TS _ 39) }
	'true'         { PT _ (TS _ 40) }
	'val'          { PT _ (TS _ 41) }
	'var'          { PT _ (TS _ 42) }
	'while'        { PT _ (TS _ 43) }
	'yield'        { PT _ (TS _ 44) }
	'{'            { PT _ (TS _ 45) }
	'||'           { PT _ (TS _ 46) }
	'}'            { PT _ (TS _ 47) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	String          rule  3
	Program         rule  4
	Instr           rules 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21
	Arg             rules 22, 23, 24, 25
	ListArg         rules 26, 27, 28
	Item            rules 29, 30
	ListItem        rules 31, 32, 33
	Decl            rules 34, 35
	Block           rule  36
	ListInstr       rules 37, 38
	Type            rules 39, 40, 41, 42, 43
	PlsOp           rules 44, 45
	MulOp           rules 46, 47, 48
	NotOp           rule  49
	NegOp           rule  50
	AndOp           rule  51
	OrOp            rule  52
	RelOp           rules 53, 54, 55, 56, 57, 58
	Expr6           rules 59, 60, 61, 62, 63, 64, 65
	Expr5           rules 66, 67, 68
	Expr4           rules 69, 70
	Expr3           rules 71, 72
	Expr2           rules 73, 74
	Expr1           rules 75, 76
	Expr            rules 77, 78, 79
	ListExpr        rules 80, 81, 82

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	';'            shift, and enter state 22
	'false'        shift, and enter state 23
	'for'          shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'return'       shift, and enter state 27
	'true'         shift, and enter state 28
	'val'          shift, and enter state 29
	'var'          shift, and enter state 30
	'while'        shift, and enter state 31
	'yield'        shift, and enter state 32
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34
	%eof           reduce using rule 37

	Ident          goto state 3
	Integer        goto state 4
	String         goto state 5
	Program        goto state 6
	Instr          goto state 7
	Decl           goto state 8
	ListInstr      goto state 9
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 18

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'&&'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'--'           reduce using rule 1
	'..'           reduce using rule 1
	'/'            reduce using rule 1
	':'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'?'            reduce using rule 1
	'in'           reduce using rule 1
	'{'            reduce using rule 1
	'||'           reduce using rule 1


State 3

	Instr -> Ident . '++' ';'                           (rule 7)
	Instr -> Ident . '--' ';'                           (rule 8)
	Instr -> Ident . '=' Expr ';'                       (rule 9)
	Expr6 -> Ident .                                    (rule 59)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 63)

	'!='           reduce using rule 59
	'%'            reduce using rule 59
	'&&'           reduce using rule 59
	'('            shift, and enter state 73
	'*'            reduce using rule 59
	'+'            reduce using rule 59
	'++'           shift, and enter state 74
	'-'            reduce using rule 59
	'--'           shift, and enter state 75
	'/'            reduce using rule 59
	';'            reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'='            shift, and enter state 76
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'?'            reduce using rule 59
	'||'           reduce using rule 59


State 4

	Expr6 -> Integer .                                  (rule 60)

	'!='           reduce using rule 60
	'%'            reduce using rule 60
	'&&'           reduce using rule 60
	')'            reduce using rule 60
	'*'            reduce using rule 60
	'+'            reduce using rule 60
	','            reduce using rule 60
	'-'            reduce using rule 60
	'..'           reduce using rule 60
	'/'            reduce using rule 60
	':'            reduce using rule 60
	';'            reduce using rule 60
	'<'            reduce using rule 60
	'<='           reduce using rule 60
	'=='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'?'            reduce using rule 60
	'{'            reduce using rule 60
	'||'           reduce using rule 60


State 5

	Expr6 -> String .                                   (rule 64)

	'!='           reduce using rule 64
	'%'            reduce using rule 64
	'&&'           reduce using rule 64
	')'            reduce using rule 64
	'*'            reduce using rule 64
	'+'            reduce using rule 64
	','            reduce using rule 64
	'-'            reduce using rule 64
	'..'           reduce using rule 64
	'/'            reduce using rule 64
	':'            reduce using rule 64
	';'            reduce using rule 64
	'<'            reduce using rule 64
	'<='           reduce using rule 64
	'=='           reduce using rule 64
	'>'            reduce using rule 64
	'>='           reduce using rule 64
	'?'            reduce using rule 64
	'{'            reduce using rule 64
	'||'           reduce using rule 64


State 6

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 7

	ListInstr -> Instr . ListInstr                      (rule 38)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	';'            shift, and enter state 22
	'false'        shift, and enter state 23
	'for'          shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'return'       shift, and enter state 27
	'true'         shift, and enter state 28
	'val'          shift, and enter state 29
	'var'          shift, and enter state 30
	'while'        shift, and enter state 31
	'yield'        shift, and enter state 32
	'}'            reduce using rule 37
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34
	%eof           reduce using rule 37

	Ident          goto state 3
	Integer        goto state 4
	String         goto state 5
	Instr          goto state 7
	Decl           goto state 8
	ListInstr      goto state 72
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 18

State 8

	Instr -> Decl . ';'                                 (rule 21)

	';'            shift, and enter state 71


State 9

	Program -> ListInstr .                              (rule 4)

	%eof           reduce using rule 4


State 10

	Expr5 -> NotOp . Expr6                              (rule 67)

	'('            shift, and enter state 20
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	Expr6          goto state 70

State 11

	Expr5 -> NegOp . Expr6                              (rule 66)

	'('            shift, and enter state 20
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	Expr6          goto state 69

State 12

	Expr5 -> Expr6 .                                    (rule 68)

	'!='           reduce using rule 68
	'%'            reduce using rule 68
	'&&'           reduce using rule 68
	')'            reduce using rule 68
	'*'            reduce using rule 68
	'+'            reduce using rule 68
	','            reduce using rule 68
	'-'            reduce using rule 68
	'..'           reduce using rule 68
	'/'            reduce using rule 68
	':'            reduce using rule 68
	';'            reduce using rule 68
	'<'            reduce using rule 68
	'<='           reduce using rule 68
	'=='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'?'            reduce using rule 68
	'{'            reduce using rule 68
	'||'           reduce using rule 68


State 13

	Expr4 -> Expr5 .                                    (rule 70)

	'!='           reduce using rule 70
	'%'            reduce using rule 70
	'&&'           reduce using rule 70
	')'            reduce using rule 70
	'*'            reduce using rule 70
	'+'            reduce using rule 70
	','            reduce using rule 70
	'-'            reduce using rule 70
	'..'           reduce using rule 70
	'/'            reduce using rule 70
	':'            reduce using rule 70
	';'            reduce using rule 70
	'<'            reduce using rule 70
	'<='           reduce using rule 70
	'=='           reduce using rule 70
	'>'            reduce using rule 70
	'>='           reduce using rule 70
	'?'            reduce using rule 70
	'{'            reduce using rule 70
	'||'           reduce using rule 70


State 14

	Expr4 -> Expr4 . MulOp Expr5                        (rule 69)
	Expr3 -> Expr4 .                                    (rule 72)

	'!='           reduce using rule 72
	'%'            shift, and enter state 66
	'&&'           reduce using rule 72
	')'            reduce using rule 72
	'*'            shift, and enter state 67
	'+'            reduce using rule 72
	','            reduce using rule 72
	'-'            reduce using rule 72
	'..'           reduce using rule 72
	'/'            shift, and enter state 68
	':'            reduce using rule 72
	';'            reduce using rule 72
	'<'            reduce using rule 72
	'<='           reduce using rule 72
	'=='           reduce using rule 72
	'>'            reduce using rule 72
	'>='           reduce using rule 72
	'?'            reduce using rule 72
	'{'            reduce using rule 72
	'||'           reduce using rule 72

	MulOp          goto state 65

State 15

	Expr3 -> Expr3 . PlsOp Expr4                        (rule 71)
	Expr2 -> Expr3 .                                    (rule 74)

	'!='           reduce using rule 74
	'&&'           reduce using rule 74
	')'            reduce using rule 74
	'+'            shift, and enter state 63
	','            reduce using rule 74
	'-'            shift, and enter state 64
	'..'           reduce using rule 74
	':'            reduce using rule 74
	';'            reduce using rule 74
	'<'            reduce using rule 74
	'<='           reduce using rule 74
	'=='           reduce using rule 74
	'>'            reduce using rule 74
	'>='           reduce using rule 74
	'?'            reduce using rule 74
	'{'            reduce using rule 74
	'||'           reduce using rule 74

	PlsOp          goto state 62

State 16

	Expr2 -> Expr2 . RelOp Expr3                        (rule 73)
	Expr1 -> Expr2 . AndOp Expr1                        (rule 75)
	Expr1 -> Expr2 .                                    (rule 76)

	'!='           shift, and enter state 55
	'&&'           shift, and enter state 56
	')'            reduce using rule 76
	','            reduce using rule 76
	'..'           reduce using rule 76
	':'            reduce using rule 76
	';'            reduce using rule 76
	'<'            shift, and enter state 57
	'<='           shift, and enter state 58
	'=='           shift, and enter state 59
	'>'            shift, and enter state 60
	'>='           shift, and enter state 61
	'?'            reduce using rule 76
	'{'            reduce using rule 76
	'||'           reduce using rule 76

	AndOp          goto state 53
	RelOp          goto state 54

State 17

	Expr -> Expr1 . OrOp Expr                           (rule 77)
	Expr -> Expr1 . '?' Expr1 ':' Expr                  (rule 78)
	Expr -> Expr1 .                                     (rule 79)

	')'            reduce using rule 79
	','            reduce using rule 79
	'..'           reduce using rule 79
	';'            reduce using rule 79
	'?'            shift, and enter state 51
	'{'            reduce using rule 79
	'||'           shift, and enter state 52

	OrOp           goto state 50

State 18

	Instr -> Expr . ';'                                 (rule 20)

	';'            shift, and enter state 49


State 19

	NotOp -> '!' .                                      (rule 49)

	'('            reduce using rule 49
	'false'        reduce using rule 49
	'true'         reduce using rule 49
	L_Ident        reduce using rule 49
	L_integ        reduce using rule 49
	L_quoted       reduce using rule 49


State 20

	Expr6 -> '(' . Expr ')'                             (rule 65)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 48

State 21

	NegOp -> '-' .                                      (rule 50)

	'('            reduce using rule 50
	'false'        reduce using rule 50
	'true'         reduce using rule 50
	L_Ident        reduce using rule 50
	L_integ        reduce using rule 50
	L_quoted       reduce using rule 50


State 22

	Instr -> ';' .                                      (rule 6)

	'!'            reduce using rule 6
	'('            reduce using rule 6
	'-'            reduce using rule 6
	';'            reduce using rule 6
	'false'        reduce using rule 6
	'for'          reduce using rule 6
	'fun'          reduce using rule 6
	'if'           reduce using rule 6
	'return'       reduce using rule 6
	'true'         reduce using rule 6
	'val'          reduce using rule 6
	'var'          reduce using rule 6
	'while'        reduce using rule 6
	'yield'        reduce using rule 6
	'}'            reduce using rule 6
	L_Ident        reduce using rule 6
	L_integ        reduce using rule 6
	L_quoted       reduce using rule 6
	%eof           reduce using rule 6


State 23

	Expr6 -> 'false' .                                  (rule 62)

	'!='           reduce using rule 62
	'%'            reduce using rule 62
	'&&'           reduce using rule 62
	')'            reduce using rule 62
	'*'            reduce using rule 62
	'+'            reduce using rule 62
	','            reduce using rule 62
	'-'            reduce using rule 62
	'..'           reduce using rule 62
	'/'            reduce using rule 62
	':'            reduce using rule 62
	';'            reduce using rule 62
	'<'            reduce using rule 62
	'<='           reduce using rule 62
	'=='           reduce using rule 62
	'>'            reduce using rule 62
	'>='           reduce using rule 62
	'?'            reduce using rule 62
	'{'            reduce using rule 62
	'||'           reduce using rule 62


State 24

	Instr -> 'for' . Ident '=' Expr '..' Expr Block     (rule 18)
	Instr -> 'for' . Ident 'in' Expr Block              (rule 19)

	L_Ident        shift, and enter state 2

	Ident          goto state 47

State 25

	Instr -> 'fun' . Ident '(' ListArg ')' ':' Type Block    (rule 5)

	L_Ident        shift, and enter state 2

	Ident          goto state 46

State 26

	Instr -> 'if' . Expr Block                          (rule 14)
	Instr -> 'if' . Expr Block 'else' Block             (rule 15)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 45

State 27

	Instr -> 'return' . Expr ';'                        (rule 10)
	Instr -> 'return' . ';'                             (rule 11)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	';'            shift, and enter state 44
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 43

State 28

	Expr6 -> 'true' .                                   (rule 61)

	'!='           reduce using rule 61
	'%'            reduce using rule 61
	'&&'           reduce using rule 61
	')'            reduce using rule 61
	'*'            reduce using rule 61
	'+'            reduce using rule 61
	','            reduce using rule 61
	'-'            reduce using rule 61
	'..'           reduce using rule 61
	'/'            reduce using rule 61
	':'            reduce using rule 61
	';'            reduce using rule 61
	'<'            reduce using rule 61
	'<='           reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	'?'            reduce using rule 61
	'{'            reduce using rule 61
	'||'           reduce using rule 61


State 29

	Decl -> 'val' . ListItem                            (rule 35)

	';'            reduce using rule 31
	L_Ident        shift, and enter state 2

	Ident          goto state 39
	Item           goto state 40
	ListItem       goto state 42

State 30

	Decl -> 'var' . ListItem                            (rule 34)

	';'            reduce using rule 31
	L_Ident        shift, and enter state 2

	Ident          goto state 39
	Item           goto state 40
	ListItem       goto state 41

State 31

	Instr -> 'while' . Expr Block                       (rule 16)
	Instr -> 'while' . Expr Block 'finally' Block       (rule 17)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 38

State 32

	Instr -> 'yield' . Expr ';'                         (rule 12)
	Instr -> 'yield' . ';'                              (rule 13)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	';'            shift, and enter state 37
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 36

State 33

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	'%'            reduce using rule 2
	'&&'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'..'           reduce using rule 2
	'/'            reduce using rule 2
	':'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'?'            reduce using rule 2
	'{'            reduce using rule 2
	'||'           reduce using rule 2


State 34

	String -> L_quoted .                                (rule 3)

	'!='           reduce using rule 3
	'%'            reduce using rule 3
	'&&'           reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'..'           reduce using rule 3
	'/'            reduce using rule 3
	':'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'?'            reduce using rule 3
	'{'            reduce using rule 3
	'||'           reduce using rule 3


State 35

	Expr6 -> Ident .                                    (rule 59)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 63)

	'!='           reduce using rule 59
	'%'            reduce using rule 59
	'&&'           reduce using rule 59
	'('            shift, and enter state 73
	')'            reduce using rule 59
	'*'            reduce using rule 59
	'+'            reduce using rule 59
	','            reduce using rule 59
	'-'            reduce using rule 59
	'..'           reduce using rule 59
	'/'            reduce using rule 59
	':'            reduce using rule 59
	';'            reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'?'            reduce using rule 59
	'{'            reduce using rule 59
	'||'           reduce using rule 59


State 36

	Instr -> 'yield' Expr . ';'                         (rule 12)

	';'            shift, and enter state 98


State 37

	Instr -> 'yield' ';' .                              (rule 13)

	'!'            reduce using rule 13
	'('            reduce using rule 13
	'-'            reduce using rule 13
	';'            reduce using rule 13
	'false'        reduce using rule 13
	'for'          reduce using rule 13
	'fun'          reduce using rule 13
	'if'           reduce using rule 13
	'return'       reduce using rule 13
	'true'         reduce using rule 13
	'val'          reduce using rule 13
	'var'          reduce using rule 13
	'while'        reduce using rule 13
	'yield'        reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	L_integ        reduce using rule 13
	L_quoted       reduce using rule 13
	%eof           reduce using rule 13


State 38

	Instr -> 'while' Expr . Block                       (rule 16)
	Instr -> 'while' Expr . Block 'finally' Block       (rule 17)

	'{'            shift, and enter state 93

	Block          goto state 97

State 39

	Item -> Ident . ':' Type '=' Expr                   (rule 29)
	Item -> Ident . ':' Type                            (rule 30)

	':'            shift, and enter state 96


State 40

	ListItem -> Item .                                  (rule 32)
	ListItem -> Item . ',' ListItem                     (rule 33)

	','            shift, and enter state 95
	';'            reduce using rule 32


State 41

	Decl -> 'var' ListItem .                            (rule 34)

	';'            reduce using rule 34


State 42

	Decl -> 'val' ListItem .                            (rule 35)

	';'            reduce using rule 35


State 43

	Instr -> 'return' Expr . ';'                        (rule 10)

	';'            shift, and enter state 94


State 44

	Instr -> 'return' ';' .                             (rule 11)

	'!'            reduce using rule 11
	'('            reduce using rule 11
	'-'            reduce using rule 11
	';'            reduce using rule 11
	'false'        reduce using rule 11
	'for'          reduce using rule 11
	'fun'          reduce using rule 11
	'if'           reduce using rule 11
	'return'       reduce using rule 11
	'true'         reduce using rule 11
	'val'          reduce using rule 11
	'var'          reduce using rule 11
	'while'        reduce using rule 11
	'yield'        reduce using rule 11
	'}'            reduce using rule 11
	L_Ident        reduce using rule 11
	L_integ        reduce using rule 11
	L_quoted       reduce using rule 11
	%eof           reduce using rule 11


State 45

	Instr -> 'if' Expr . Block                          (rule 14)
	Instr -> 'if' Expr . Block 'else' Block             (rule 15)

	'{'            shift, and enter state 93

	Block          goto state 92

State 46

	Instr -> 'fun' Ident . '(' ListArg ')' ':' Type Block    (rule 5)

	'('            shift, and enter state 91


State 47

	Instr -> 'for' Ident . '=' Expr '..' Expr Block     (rule 18)
	Instr -> 'for' Ident . 'in' Expr Block              (rule 19)

	'='            shift, and enter state 89
	'in'           shift, and enter state 90


State 48

	Expr6 -> '(' Expr . ')'                             (rule 65)

	')'            shift, and enter state 88


State 49

	Instr -> Expr ';' .                                 (rule 20)

	'!'            reduce using rule 20
	'('            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'false'        reduce using rule 20
	'for'          reduce using rule 20
	'fun'          reduce using rule 20
	'if'           reduce using rule 20
	'return'       reduce using rule 20
	'true'         reduce using rule 20
	'val'          reduce using rule 20
	'var'          reduce using rule 20
	'while'        reduce using rule 20
	'yield'        reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	L_integ        reduce using rule 20
	L_quoted       reduce using rule 20
	%eof           reduce using rule 20


State 50

	Expr -> Expr1 OrOp . Expr                           (rule 77)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 87

State 51

	Expr -> Expr1 '?' . Expr1 ':' Expr                  (rule 78)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 86

State 52

	OrOp -> '||' .                                      (rule 52)

	'!'            reduce using rule 52
	'('            reduce using rule 52
	'-'            reduce using rule 52
	'false'        reduce using rule 52
	'true'         reduce using rule 52
	L_Ident        reduce using rule 52
	L_integ        reduce using rule 52
	L_quoted       reduce using rule 52


State 53

	Expr1 -> Expr2 AndOp . Expr1                        (rule 75)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 85

State 54

	Expr2 -> Expr2 RelOp . Expr3                        (rule 73)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 84

State 55

	RelOp -> '!=' .                                     (rule 54)

	'!'            reduce using rule 54
	'('            reduce using rule 54
	'-'            reduce using rule 54
	'false'        reduce using rule 54
	'true'         reduce using rule 54
	L_Ident        reduce using rule 54
	L_integ        reduce using rule 54
	L_quoted       reduce using rule 54


State 56

	AndOp -> '&&' .                                     (rule 51)

	'!'            reduce using rule 51
	'('            reduce using rule 51
	'-'            reduce using rule 51
	'false'        reduce using rule 51
	'true'         reduce using rule 51
	L_Ident        reduce using rule 51
	L_integ        reduce using rule 51
	L_quoted       reduce using rule 51


State 57

	RelOp -> '<' .                                      (rule 55)

	'!'            reduce using rule 55
	'('            reduce using rule 55
	'-'            reduce using rule 55
	'false'        reduce using rule 55
	'true'         reduce using rule 55
	L_Ident        reduce using rule 55
	L_integ        reduce using rule 55
	L_quoted       reduce using rule 55


State 58

	RelOp -> '<=' .                                     (rule 57)

	'!'            reduce using rule 57
	'('            reduce using rule 57
	'-'            reduce using rule 57
	'false'        reduce using rule 57
	'true'         reduce using rule 57
	L_Ident        reduce using rule 57
	L_integ        reduce using rule 57
	L_quoted       reduce using rule 57


State 59

	RelOp -> '==' .                                     (rule 53)

	'!'            reduce using rule 53
	'('            reduce using rule 53
	'-'            reduce using rule 53
	'false'        reduce using rule 53
	'true'         reduce using rule 53
	L_Ident        reduce using rule 53
	L_integ        reduce using rule 53
	L_quoted       reduce using rule 53


State 60

	RelOp -> '>' .                                      (rule 56)

	'!'            reduce using rule 56
	'('            reduce using rule 56
	'-'            reduce using rule 56
	'false'        reduce using rule 56
	'true'         reduce using rule 56
	L_Ident        reduce using rule 56
	L_integ        reduce using rule 56
	L_quoted       reduce using rule 56


State 61

	RelOp -> '>=' .                                     (rule 58)

	'!'            reduce using rule 58
	'('            reduce using rule 58
	'-'            reduce using rule 58
	'false'        reduce using rule 58
	'true'         reduce using rule 58
	L_Ident        reduce using rule 58
	L_integ        reduce using rule 58
	L_quoted       reduce using rule 58


State 62

	Expr3 -> Expr3 PlsOp . Expr4                        (rule 71)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 83

State 63

	PlsOp -> '+' .                                      (rule 44)

	'!'            reduce using rule 44
	'('            reduce using rule 44
	'-'            reduce using rule 44
	'false'        reduce using rule 44
	'true'         reduce using rule 44
	L_Ident        reduce using rule 44
	L_integ        reduce using rule 44
	L_quoted       reduce using rule 44


State 64

	PlsOp -> '-' .                                      (rule 45)

	'!'            reduce using rule 45
	'('            reduce using rule 45
	'-'            reduce using rule 45
	'false'        reduce using rule 45
	'true'         reduce using rule 45
	L_Ident        reduce using rule 45
	L_integ        reduce using rule 45
	L_quoted       reduce using rule 45


State 65

	Expr4 -> Expr4 MulOp . Expr5                        (rule 69)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 82

State 66

	MulOp -> '%' .                                      (rule 48)

	'!'            reduce using rule 48
	'('            reduce using rule 48
	'-'            reduce using rule 48
	'false'        reduce using rule 48
	'true'         reduce using rule 48
	L_Ident        reduce using rule 48
	L_integ        reduce using rule 48
	L_quoted       reduce using rule 48


State 67

	MulOp -> '*' .                                      (rule 46)

	'!'            reduce using rule 46
	'('            reduce using rule 46
	'-'            reduce using rule 46
	'false'        reduce using rule 46
	'true'         reduce using rule 46
	L_Ident        reduce using rule 46
	L_integ        reduce using rule 46
	L_quoted       reduce using rule 46


State 68

	MulOp -> '/' .                                      (rule 47)

	'!'            reduce using rule 47
	'('            reduce using rule 47
	'-'            reduce using rule 47
	'false'        reduce using rule 47
	'true'         reduce using rule 47
	L_Ident        reduce using rule 47
	L_integ        reduce using rule 47
	L_quoted       reduce using rule 47


State 69

	Expr5 -> NegOp Expr6 .                              (rule 66)

	'!='           reduce using rule 66
	'%'            reduce using rule 66
	'&&'           reduce using rule 66
	')'            reduce using rule 66
	'*'            reduce using rule 66
	'+'            reduce using rule 66
	','            reduce using rule 66
	'-'            reduce using rule 66
	'..'           reduce using rule 66
	'/'            reduce using rule 66
	':'            reduce using rule 66
	';'            reduce using rule 66
	'<'            reduce using rule 66
	'<='           reduce using rule 66
	'=='           reduce using rule 66
	'>'            reduce using rule 66
	'>='           reduce using rule 66
	'?'            reduce using rule 66
	'{'            reduce using rule 66
	'||'           reduce using rule 66


State 70

	Expr5 -> NotOp Expr6 .                              (rule 67)

	'!='           reduce using rule 67
	'%'            reduce using rule 67
	'&&'           reduce using rule 67
	')'            reduce using rule 67
	'*'            reduce using rule 67
	'+'            reduce using rule 67
	','            reduce using rule 67
	'-'            reduce using rule 67
	'..'           reduce using rule 67
	'/'            reduce using rule 67
	':'            reduce using rule 67
	';'            reduce using rule 67
	'<'            reduce using rule 67
	'<='           reduce using rule 67
	'=='           reduce using rule 67
	'>'            reduce using rule 67
	'>='           reduce using rule 67
	'?'            reduce using rule 67
	'{'            reduce using rule 67
	'||'           reduce using rule 67


State 71

	Instr -> Decl ';' .                                 (rule 21)

	'!'            reduce using rule 21
	'('            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'false'        reduce using rule 21
	'for'          reduce using rule 21
	'fun'          reduce using rule 21
	'if'           reduce using rule 21
	'return'       reduce using rule 21
	'true'         reduce using rule 21
	'val'          reduce using rule 21
	'var'          reduce using rule 21
	'while'        reduce using rule 21
	'yield'        reduce using rule 21
	'}'            reduce using rule 21
	L_Ident        reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21
	%eof           reduce using rule 21


State 72

	ListInstr -> Instr ListInstr .                      (rule 38)

	'}'            reduce using rule 38
	%eof           reduce using rule 38


State 73

	Expr6 -> Ident '(' . ListExpr ')'                   (rule 63)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	')'            reduce using rule 80
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 80
	ListExpr       goto state 81

State 74

	Instr -> Ident '++' . ';'                           (rule 7)

	';'            shift, and enter state 79


State 75

	Instr -> Ident '--' . ';'                           (rule 8)

	';'            shift, and enter state 78


State 76

	Instr -> Ident '=' . Expr ';'                       (rule 9)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 77

State 77

	Instr -> Ident '=' Expr . ';'                       (rule 9)

	';'            shift, and enter state 118


State 78

	Instr -> Ident '--' ';' .                           (rule 8)

	'!'            reduce using rule 8
	'('            reduce using rule 8
	'-'            reduce using rule 8
	';'            reduce using rule 8
	'false'        reduce using rule 8
	'for'          reduce using rule 8
	'fun'          reduce using rule 8
	'if'           reduce using rule 8
	'return'       reduce using rule 8
	'true'         reduce using rule 8
	'val'          reduce using rule 8
	'var'          reduce using rule 8
	'while'        reduce using rule 8
	'yield'        reduce using rule 8
	'}'            reduce using rule 8
	L_Ident        reduce using rule 8
	L_integ        reduce using rule 8
	L_quoted       reduce using rule 8
	%eof           reduce using rule 8


State 79

	Instr -> Ident '++' ';' .                           (rule 7)

	'!'            reduce using rule 7
	'('            reduce using rule 7
	'-'            reduce using rule 7
	';'            reduce using rule 7
	'false'        reduce using rule 7
	'for'          reduce using rule 7
	'fun'          reduce using rule 7
	'if'           reduce using rule 7
	'return'       reduce using rule 7
	'true'         reduce using rule 7
	'val'          reduce using rule 7
	'var'          reduce using rule 7
	'while'        reduce using rule 7
	'yield'        reduce using rule 7
	'}'            reduce using rule 7
	L_Ident        reduce using rule 7
	L_integ        reduce using rule 7
	L_quoted       reduce using rule 7
	%eof           reduce using rule 7


State 80

	ListExpr -> Expr .                                  (rule 81)
	ListExpr -> Expr . ',' ListExpr                     (rule 82)

	')'            reduce using rule 81
	','            shift, and enter state 117


State 81

	Expr6 -> Ident '(' ListExpr . ')'                   (rule 63)

	')'            shift, and enter state 116


State 82

	Expr4 -> Expr4 MulOp Expr5 .                        (rule 69)

	'!='           reduce using rule 69
	'%'            reduce using rule 69
	'&&'           reduce using rule 69
	')'            reduce using rule 69
	'*'            reduce using rule 69
	'+'            reduce using rule 69
	','            reduce using rule 69
	'-'            reduce using rule 69
	'..'           reduce using rule 69
	'/'            reduce using rule 69
	':'            reduce using rule 69
	';'            reduce using rule 69
	'<'            reduce using rule 69
	'<='           reduce using rule 69
	'=='           reduce using rule 69
	'>'            reduce using rule 69
	'>='           reduce using rule 69
	'?'            reduce using rule 69
	'{'            reduce using rule 69
	'||'           reduce using rule 69


State 83

	Expr4 -> Expr4 . MulOp Expr5                        (rule 69)
	Expr3 -> Expr3 PlsOp Expr4 .                        (rule 71)

	'!='           reduce using rule 71
	'%'            shift, and enter state 66
	'&&'           reduce using rule 71
	')'            reduce using rule 71
	'*'            shift, and enter state 67
	'+'            reduce using rule 71
	','            reduce using rule 71
	'-'            reduce using rule 71
	'..'           reduce using rule 71
	'/'            shift, and enter state 68
	':'            reduce using rule 71
	';'            reduce using rule 71
	'<'            reduce using rule 71
	'<='           reduce using rule 71
	'=='           reduce using rule 71
	'>'            reduce using rule 71
	'>='           reduce using rule 71
	'?'            reduce using rule 71
	'{'            reduce using rule 71
	'||'           reduce using rule 71

	MulOp          goto state 65

State 84

	Expr3 -> Expr3 . PlsOp Expr4                        (rule 71)
	Expr2 -> Expr2 RelOp Expr3 .                        (rule 73)

	'!='           reduce using rule 73
	'&&'           reduce using rule 73
	')'            reduce using rule 73
	'+'            shift, and enter state 63
	','            reduce using rule 73
	'-'            shift, and enter state 64
	'..'           reduce using rule 73
	':'            reduce using rule 73
	';'            reduce using rule 73
	'<'            reduce using rule 73
	'<='           reduce using rule 73
	'=='           reduce using rule 73
	'>'            reduce using rule 73
	'>='           reduce using rule 73
	'?'            reduce using rule 73
	'{'            reduce using rule 73
	'||'           reduce using rule 73

	PlsOp          goto state 62

State 85

	Expr1 -> Expr2 AndOp Expr1 .                        (rule 75)

	')'            reduce using rule 75
	','            reduce using rule 75
	'..'           reduce using rule 75
	':'            reduce using rule 75
	';'            reduce using rule 75
	'?'            reduce using rule 75
	'{'            reduce using rule 75
	'||'           reduce using rule 75


State 86

	Expr -> Expr1 '?' Expr1 . ':' Expr                  (rule 78)

	':'            shift, and enter state 115


State 87

	Expr -> Expr1 OrOp Expr .                           (rule 77)

	')'            reduce using rule 77
	','            reduce using rule 77
	'..'           reduce using rule 77
	';'            reduce using rule 77
	'{'            reduce using rule 77


State 88

	Expr6 -> '(' Expr ')' .                             (rule 65)

	'!='           reduce using rule 65
	'%'            reduce using rule 65
	'&&'           reduce using rule 65
	')'            reduce using rule 65
	'*'            reduce using rule 65
	'+'            reduce using rule 65
	','            reduce using rule 65
	'-'            reduce using rule 65
	'..'           reduce using rule 65
	'/'            reduce using rule 65
	':'            reduce using rule 65
	';'            reduce using rule 65
	'<'            reduce using rule 65
	'<='           reduce using rule 65
	'=='           reduce using rule 65
	'>'            reduce using rule 65
	'>='           reduce using rule 65
	'?'            reduce using rule 65
	'{'            reduce using rule 65
	'||'           reduce using rule 65


State 89

	Instr -> 'for' Ident '=' . Expr '..' Expr Block     (rule 18)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 114

State 90

	Instr -> 'for' Ident 'in' . Expr Block              (rule 19)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 113

State 91

	Instr -> 'fun' Ident '(' . ListArg ')' ':' Type Block    (rule 5)

	')'            reduce using rule 26
	'val'          shift, and enter state 111
	'var'          shift, and enter state 112

	Arg            goto state 109
	ListArg        goto state 110

State 92

	Instr -> 'if' Expr Block .                          (rule 14)
	Instr -> 'if' Expr Block . 'else' Block             (rule 15)

	'!'            reduce using rule 14
	'('            reduce using rule 14
	'-'            reduce using rule 14
	';'            reduce using rule 14
	'else'         shift, and enter state 108
	'false'        reduce using rule 14
	'for'          reduce using rule 14
	'fun'          reduce using rule 14
	'if'           reduce using rule 14
	'return'       reduce using rule 14
	'true'         reduce using rule 14
	'val'          reduce using rule 14
	'var'          reduce using rule 14
	'while'        reduce using rule 14
	'yield'        reduce using rule 14
	'}'            reduce using rule 14
	L_Ident        reduce using rule 14
	L_integ        reduce using rule 14
	L_quoted       reduce using rule 14
	%eof           reduce using rule 14


State 93

	Block -> '{' . ListInstr '}'                        (rule 36)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	';'            shift, and enter state 22
	'false'        shift, and enter state 23
	'for'          shift, and enter state 24
	'fun'          shift, and enter state 25
	'if'           shift, and enter state 26
	'return'       shift, and enter state 27
	'true'         shift, and enter state 28
	'val'          shift, and enter state 29
	'var'          shift, and enter state 30
	'while'        shift, and enter state 31
	'yield'        shift, and enter state 32
	'}'            reduce using rule 37
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 3
	Integer        goto state 4
	String         goto state 5
	Instr          goto state 7
	Decl           goto state 8
	ListInstr      goto state 107
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 18

State 94

	Instr -> 'return' Expr ';' .                        (rule 10)

	'!'            reduce using rule 10
	'('            reduce using rule 10
	'-'            reduce using rule 10
	';'            reduce using rule 10
	'false'        reduce using rule 10
	'for'          reduce using rule 10
	'fun'          reduce using rule 10
	'if'           reduce using rule 10
	'return'       reduce using rule 10
	'true'         reduce using rule 10
	'val'          reduce using rule 10
	'var'          reduce using rule 10
	'while'        reduce using rule 10
	'yield'        reduce using rule 10
	'}'            reduce using rule 10
	L_Ident        reduce using rule 10
	L_integ        reduce using rule 10
	L_quoted       reduce using rule 10
	%eof           reduce using rule 10


State 95

	ListItem -> Item ',' . ListItem                     (rule 33)

	';'            reduce using rule 31
	L_Ident        shift, and enter state 2

	Ident          goto state 39
	Item           goto state 40
	ListItem       goto state 106

State 96

	Item -> Ident ':' . Type '=' Expr                   (rule 29)
	Item -> Ident ':' . Type                            (rule 30)

	'Boolean'      shift, and enter state 101
	'Gen'          shift, and enter state 102
	'Integer'      shift, and enter state 103
	'String'       shift, and enter state 104
	'Unit'         shift, and enter state 105

	Type           goto state 100

State 97

	Instr -> 'while' Expr Block .                       (rule 16)
	Instr -> 'while' Expr Block . 'finally' Block       (rule 17)

	'!'            reduce using rule 16
	'('            reduce using rule 16
	'-'            reduce using rule 16
	';'            reduce using rule 16
	'false'        reduce using rule 16
	'finally'      shift, and enter state 99
	'for'          reduce using rule 16
	'fun'          reduce using rule 16
	'if'           reduce using rule 16
	'return'       reduce using rule 16
	'true'         reduce using rule 16
	'val'          reduce using rule 16
	'var'          reduce using rule 16
	'while'        reduce using rule 16
	'yield'        reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	L_integ        reduce using rule 16
	L_quoted       reduce using rule 16
	%eof           reduce using rule 16


State 98

	Instr -> 'yield' Expr ';' .                         (rule 12)

	'!'            reduce using rule 12
	'('            reduce using rule 12
	'-'            reduce using rule 12
	';'            reduce using rule 12
	'false'        reduce using rule 12
	'for'          reduce using rule 12
	'fun'          reduce using rule 12
	'if'           reduce using rule 12
	'return'       reduce using rule 12
	'true'         reduce using rule 12
	'val'          reduce using rule 12
	'var'          reduce using rule 12
	'while'        reduce using rule 12
	'yield'        reduce using rule 12
	'}'            reduce using rule 12
	L_Ident        reduce using rule 12
	L_integ        reduce using rule 12
	L_quoted       reduce using rule 12
	%eof           reduce using rule 12


State 99

	Instr -> 'while' Expr Block 'finally' . Block       (rule 17)

	'{'            shift, and enter state 93

	Block          goto state 131

State 100

	Item -> Ident ':' Type . '=' Expr                   (rule 29)
	Item -> Ident ':' Type .                            (rule 30)

	','            reduce using rule 30
	';'            reduce using rule 30
	'='            shift, and enter state 130


State 101

	Type -> 'Boolean' .                                 (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40
	'='            reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40


State 102

	Type -> 'Gen' . '[' Type ']'                        (rule 42)

	'['            shift, and enter state 129


State 103

	Type -> 'Integer' .                                 (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	'='            reduce using rule 39
	']'            reduce using rule 39
	'{'            reduce using rule 39


State 104

	Type -> 'String' .                                  (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	'='            reduce using rule 41
	']'            reduce using rule 41
	'{'            reduce using rule 41


State 105

	Type -> 'Unit' .                                    (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	'='            reduce using rule 43
	']'            reduce using rule 43
	'{'            reduce using rule 43


State 106

	ListItem -> Item ',' ListItem .                     (rule 33)

	';'            reduce using rule 33


State 107

	Block -> '{' ListInstr . '}'                        (rule 36)

	'}'            shift, and enter state 128


State 108

	Instr -> 'if' Expr Block 'else' . Block             (rule 15)

	'{'            shift, and enter state 93

	Block          goto state 127

State 109

	ListArg -> Arg .                                    (rule 27)
	ListArg -> Arg . ',' ListArg                        (rule 28)

	')'            reduce using rule 27
	','            shift, and enter state 126


State 110

	Instr -> 'fun' Ident '(' ListArg . ')' ':' Type Block    (rule 5)

	')'            shift, and enter state 125


State 111

	Arg -> 'val' . Ident ':' Type                       (rule 23)
	Arg -> 'val' . Ident ':' 'new' Type                 (rule 25)

	L_Ident        shift, and enter state 2

	Ident          goto state 124

State 112

	Arg -> 'var' . Ident ':' Type                       (rule 22)
	Arg -> 'var' . Ident ':' 'new' Type                 (rule 24)

	L_Ident        shift, and enter state 2

	Ident          goto state 123

State 113

	Instr -> 'for' Ident 'in' Expr . Block              (rule 19)

	'{'            shift, and enter state 93

	Block          goto state 122

State 114

	Instr -> 'for' Ident '=' Expr . '..' Expr Block     (rule 18)

	'..'           shift, and enter state 121


State 115

	Expr -> Expr1 '?' Expr1 ':' . Expr                  (rule 78)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 120

State 116

	Expr6 -> Ident '(' ListExpr ')' .                   (rule 63)

	'!='           reduce using rule 63
	'%'            reduce using rule 63
	'&&'           reduce using rule 63
	')'            reduce using rule 63
	'*'            reduce using rule 63
	'+'            reduce using rule 63
	','            reduce using rule 63
	'-'            reduce using rule 63
	'..'           reduce using rule 63
	'/'            reduce using rule 63
	':'            reduce using rule 63
	';'            reduce using rule 63
	'<'            reduce using rule 63
	'<='           reduce using rule 63
	'=='           reduce using rule 63
	'>'            reduce using rule 63
	'>='           reduce using rule 63
	'?'            reduce using rule 63
	'{'            reduce using rule 63
	'||'           reduce using rule 63


State 117

	ListExpr -> Expr ',' . ListExpr                     (rule 82)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	')'            reduce using rule 80
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 80
	ListExpr       goto state 119

State 118

	Instr -> Ident '=' Expr ';' .                       (rule 9)

	'!'            reduce using rule 9
	'('            reduce using rule 9
	'-'            reduce using rule 9
	';'            reduce using rule 9
	'false'        reduce using rule 9
	'for'          reduce using rule 9
	'fun'          reduce using rule 9
	'if'           reduce using rule 9
	'return'       reduce using rule 9
	'true'         reduce using rule 9
	'val'          reduce using rule 9
	'var'          reduce using rule 9
	'while'        reduce using rule 9
	'yield'        reduce using rule 9
	'}'            reduce using rule 9
	L_Ident        reduce using rule 9
	L_integ        reduce using rule 9
	L_quoted       reduce using rule 9
	%eof           reduce using rule 9


State 119

	ListExpr -> Expr ',' ListExpr .                     (rule 82)

	')'            reduce using rule 82


State 120

	Expr -> Expr1 '?' Expr1 ':' Expr .                  (rule 78)

	')'            reduce using rule 78
	','            reduce using rule 78
	'..'           reduce using rule 78
	';'            reduce using rule 78
	'{'            reduce using rule 78


State 121

	Instr -> 'for' Ident '=' Expr '..' . Expr Block     (rule 18)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 138

State 122

	Instr -> 'for' Ident 'in' Expr Block .              (rule 19)

	'!'            reduce using rule 19
	'('            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'false'        reduce using rule 19
	'for'          reduce using rule 19
	'fun'          reduce using rule 19
	'if'           reduce using rule 19
	'return'       reduce using rule 19
	'true'         reduce using rule 19
	'val'          reduce using rule 19
	'var'          reduce using rule 19
	'while'        reduce using rule 19
	'yield'        reduce using rule 19
	'}'            reduce using rule 19
	L_Ident        reduce using rule 19
	L_integ        reduce using rule 19
	L_quoted       reduce using rule 19
	%eof           reduce using rule 19


State 123

	Arg -> 'var' Ident . ':' Type                       (rule 22)
	Arg -> 'var' Ident . ':' 'new' Type                 (rule 24)

	':'            shift, and enter state 137


State 124

	Arg -> 'val' Ident . ':' Type                       (rule 23)
	Arg -> 'val' Ident . ':' 'new' Type                 (rule 25)

	':'            shift, and enter state 136


State 125

	Instr -> 'fun' Ident '(' ListArg ')' . ':' Type Block    (rule 5)

	':'            shift, and enter state 135


State 126

	ListArg -> Arg ',' . ListArg                        (rule 28)

	')'            reduce using rule 26
	'val'          shift, and enter state 111
	'var'          shift, and enter state 112

	Arg            goto state 109
	ListArg        goto state 134

State 127

	Instr -> 'if' Expr Block 'else' Block .             (rule 15)

	'!'            reduce using rule 15
	'('            reduce using rule 15
	'-'            reduce using rule 15
	';'            reduce using rule 15
	'false'        reduce using rule 15
	'for'          reduce using rule 15
	'fun'          reduce using rule 15
	'if'           reduce using rule 15
	'return'       reduce using rule 15
	'true'         reduce using rule 15
	'val'          reduce using rule 15
	'var'          reduce using rule 15
	'while'        reduce using rule 15
	'yield'        reduce using rule 15
	'}'            reduce using rule 15
	L_Ident        reduce using rule 15
	L_integ        reduce using rule 15
	L_quoted       reduce using rule 15
	%eof           reduce using rule 15


State 128

	Block -> '{' ListInstr '}' .                        (rule 36)

	'!'            reduce using rule 36
	'('            reduce using rule 36
	'-'            reduce using rule 36
	';'            reduce using rule 36
	'else'         reduce using rule 36
	'false'        reduce using rule 36
	'finally'      reduce using rule 36
	'for'          reduce using rule 36
	'fun'          reduce using rule 36
	'if'           reduce using rule 36
	'return'       reduce using rule 36
	'true'         reduce using rule 36
	'val'          reduce using rule 36
	'var'          reduce using rule 36
	'while'        reduce using rule 36
	'yield'        reduce using rule 36
	'}'            reduce using rule 36
	L_Ident        reduce using rule 36
	L_integ        reduce using rule 36
	L_quoted       reduce using rule 36
	%eof           reduce using rule 36


State 129

	Type -> 'Gen' '[' . Type ']'                        (rule 42)

	'Boolean'      shift, and enter state 101
	'Gen'          shift, and enter state 102
	'Integer'      shift, and enter state 103
	'String'       shift, and enter state 104
	'Unit'         shift, and enter state 105

	Type           goto state 133

State 130

	Item -> Ident ':' Type '=' . Expr                   (rule 29)

	'!'            shift, and enter state 19
	'('            shift, and enter state 20
	'-'            shift, and enter state 21
	'false'        shift, and enter state 23
	'true'         shift, and enter state 28
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 33
	L_quoted       shift, and enter state 34

	Ident          goto state 35
	Integer        goto state 4
	String         goto state 5
	NotOp          goto state 10
	NegOp          goto state 11
	Expr6          goto state 12
	Expr5          goto state 13
	Expr4          goto state 14
	Expr3          goto state 15
	Expr2          goto state 16
	Expr1          goto state 17
	Expr           goto state 132

State 131

	Instr -> 'while' Expr Block 'finally' Block .       (rule 17)

	'!'            reduce using rule 17
	'('            reduce using rule 17
	'-'            reduce using rule 17
	';'            reduce using rule 17
	'false'        reduce using rule 17
	'for'          reduce using rule 17
	'fun'          reduce using rule 17
	'if'           reduce using rule 17
	'return'       reduce using rule 17
	'true'         reduce using rule 17
	'val'          reduce using rule 17
	'var'          reduce using rule 17
	'while'        reduce using rule 17
	'yield'        reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17
	%eof           reduce using rule 17


State 132

	Item -> Ident ':' Type '=' Expr .                   (rule 29)

	','            reduce using rule 29
	';'            reduce using rule 29


State 133

	Type -> 'Gen' '[' Type . ']'                        (rule 42)

	']'            shift, and enter state 145


State 134

	ListArg -> Arg ',' ListArg .                        (rule 28)

	')'            reduce using rule 28


State 135

	Instr -> 'fun' Ident '(' ListArg ')' ':' . Type Block    (rule 5)

	'Boolean'      shift, and enter state 101
	'Gen'          shift, and enter state 102
	'Integer'      shift, and enter state 103
	'String'       shift, and enter state 104
	'Unit'         shift, and enter state 105

	Type           goto state 144

State 136

	Arg -> 'val' Ident ':' . Type                       (rule 23)
	Arg -> 'val' Ident ':' . 'new' Type                 (rule 25)

	'Boolean'      shift, and enter state 101
	'Gen'          shift, and enter state 102
	'Integer'      shift, and enter state 103
	'String'       shift, and enter state 104
	'Unit'         shift, and enter state 105
	'new'          shift, and enter state 143

	Type           goto state 142

State 137

	Arg -> 'var' Ident ':' . Type                       (rule 22)
	Arg -> 'var' Ident ':' . 'new' Type                 (rule 24)

	'Boolean'      shift, and enter state 101
	'Gen'          shift, and enter state 102
	'Integer'      shift, and enter state 103
	'String'       shift, and enter state 104
	'Unit'         shift, and enter state 105
	'new'          shift, and enter state 141

	Type           goto state 140

State 138

	Instr -> 'for' Ident '=' Expr '..' Expr . Block     (rule 18)

	'{'            shift, and enter state 93

	Block          goto state 139

State 139

	Instr -> 'for' Ident '=' Expr '..' Expr Block .     (rule 18)

	'!'            reduce using rule 18
	'('            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'false'        reduce using rule 18
	'for'          reduce using rule 18
	'fun'          reduce using rule 18
	'if'           reduce using rule 18
	'return'       reduce using rule 18
	'true'         reduce using rule 18
	'val'          reduce using rule 18
	'var'          reduce using rule 18
	'while'        reduce using rule 18
	'yield'        reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	L_integ        reduce using rule 18
	L_quoted       reduce using rule 18
	%eof           reduce using rule 18


State 140

	Arg -> 'var' Ident ':' Type .                       (rule 22)

	')'            reduce using rule 22
	','            reduce using rule 22


State 141

	Arg -> 'var' Ident ':' 'new' . Type                 (rule 24)

	'Boolean'      shift, and enter state 101
	'Gen'          shift, and enter state 102
	'Integer'      shift, and enter state 103
	'String'       shift, and enter state 104
	'Unit'         shift, and enter state 105

	Type           goto state 148

State 142

	Arg -> 'val' Ident ':' Type .                       (rule 23)

	')'            reduce using rule 23
	','            reduce using rule 23


State 143

	Arg -> 'val' Ident ':' 'new' . Type                 (rule 25)

	'Boolean'      shift, and enter state 101
	'Gen'          shift, and enter state 102
	'Integer'      shift, and enter state 103
	'String'       shift, and enter state 104
	'Unit'         shift, and enter state 105

	Type           goto state 147

State 144

	Instr -> 'fun' Ident '(' ListArg ')' ':' Type . Block    (rule 5)

	'{'            shift, and enter state 93

	Block          goto state 146

State 145

	Type -> 'Gen' '[' Type ']' .                        (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	'='            reduce using rule 42
	']'            reduce using rule 42
	'{'            reduce using rule 42


State 146

	Instr -> 'fun' Ident '(' ListArg ')' ':' Type Block .    (rule 5)

	'!'            reduce using rule 5
	'('            reduce using rule 5
	'-'            reduce using rule 5
	';'            reduce using rule 5
	'false'        reduce using rule 5
	'for'          reduce using rule 5
	'fun'          reduce using rule 5
	'if'           reduce using rule 5
	'return'       reduce using rule 5
	'true'         reduce using rule 5
	'val'          reduce using rule 5
	'var'          reduce using rule 5
	'while'        reduce using rule 5
	'yield'        reduce using rule 5
	'}'            reduce using rule 5
	L_Ident        reduce using rule 5
	L_integ        reduce using rule 5
	L_quoted       reduce using rule 5
	%eof           reduce using rule 5


State 147

	Arg -> 'val' Ident ':' 'new' Type .                 (rule 25)

	')'            reduce using rule 25
	','            reduce using rule 25


State 148

	Arg -> 'var' Ident ':' 'new' Type .                 (rule 24)

	')'            reduce using rule 24
	','            reduce using rule 24


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 83
Number of terminals: 50
Number of non-terminals: 29
Number of states: 149
