-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Src.Jabba.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Src.Jabba.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Src.Jabba.Abs.Ident -> Result
transIdent x = case x of
  Src.Jabba.Abs.Ident string -> failure x

transProgram :: Src.Jabba.Abs.Program -> Result
transProgram x = case x of
  Src.Jabba.Abs.PProgram instrs -> failure x

transInstr :: Src.Jabba.Abs.Instr -> Result
transInstr x = case x of
  Src.Jabba.Abs.DFun ident args type_ block -> failure x
  Src.Jabba.Abs.IUnit -> failure x
  Src.Jabba.Abs.IIncr ident -> failure x
  Src.Jabba.Abs.IDecr ident -> failure x
  Src.Jabba.Abs.IAss ident expr -> failure x
  Src.Jabba.Abs.IRet expr -> failure x
  Src.Jabba.Abs.IRetUnit -> failure x
  Src.Jabba.Abs.IYield expr -> failure x
  Src.Jabba.Abs.IYieldUnit -> failure x
  Src.Jabba.Abs.IBreak -> failure x
  Src.Jabba.Abs.ICont -> failure x
  Src.Jabba.Abs.IIf expr block -> failure x
  Src.Jabba.Abs.IIfElse expr block1 block2 -> failure x
  Src.Jabba.Abs.IWhile expr block -> failure x
  Src.Jabba.Abs.IWhileFin expr block1 block2 -> failure x
  Src.Jabba.Abs.IFor ident expr1 expr2 block -> failure x
  Src.Jabba.Abs.IForGen ident expr block -> failure x
  Src.Jabba.Abs.IExpr expr -> failure x
  Src.Jabba.Abs.IDecl decl -> failure x

transArg :: Src.Jabba.Abs.Arg -> Result
transArg x = case x of
  Src.Jabba.Abs.RefMutArg ident type_ -> failure x
  Src.Jabba.Abs.RefConstArg ident type_ -> failure x
  Src.Jabba.Abs.CopyMutArg ident type_ -> failure x
  Src.Jabba.Abs.CopyConstArg ident type_ -> failure x

transItem :: Src.Jabba.Abs.Item -> Result
transItem x = case x of
  Src.Jabba.Abs.DItemVal ident type_ expr -> failure x
  Src.Jabba.Abs.DItem ident type_ -> failure x

transDecl :: Src.Jabba.Abs.Decl -> Result
transDecl x = case x of
  Src.Jabba.Abs.DVar items -> failure x
  Src.Jabba.Abs.DVal items -> failure x

transBlock :: Src.Jabba.Abs.Block -> Result
transBlock x = case x of
  Src.Jabba.Abs.IBlock instrs -> failure x

transType :: Src.Jabba.Abs.Type -> Result
transType x = case x of
  Src.Jabba.Abs.TInt -> failure x
  Src.Jabba.Abs.TBool -> failure x
  Src.Jabba.Abs.TString -> failure x
  Src.Jabba.Abs.TGen type_ -> failure x
  Src.Jabba.Abs.TVoid -> failure x

transPlsOp :: Src.Jabba.Abs.PlsOp -> Result
transPlsOp x = case x of
  Src.Jabba.Abs.OPlus -> failure x
  Src.Jabba.Abs.OMinus -> failure x

transMulOp :: Src.Jabba.Abs.MulOp -> Result
transMulOp x = case x of
  Src.Jabba.Abs.OMul -> failure x
  Src.Jabba.Abs.ODiv -> failure x
  Src.Jabba.Abs.OMod -> failure x

transNotOp :: Src.Jabba.Abs.NotOp -> Result
transNotOp x = case x of
  Src.Jabba.Abs.ONot -> failure x

transNegOp :: Src.Jabba.Abs.NegOp -> Result
transNegOp x = case x of
  Src.Jabba.Abs.ONeg -> failure x

transAndOp :: Src.Jabba.Abs.AndOp -> Result
transAndOp x = case x of
  Src.Jabba.Abs.OAnd -> failure x

transOrOp :: Src.Jabba.Abs.OrOp -> Result
transOrOp x = case x of
  Src.Jabba.Abs.OOr -> failure x

transRelOp :: Src.Jabba.Abs.RelOp -> Result
transRelOp x = case x of
  Src.Jabba.Abs.REq -> failure x
  Src.Jabba.Abs.RNeq -> failure x
  Src.Jabba.Abs.RLt -> failure x
  Src.Jabba.Abs.RGt -> failure x
  Src.Jabba.Abs.RLeq -> failure x
  Src.Jabba.Abs.RGeq -> failure x

transExpr :: Src.Jabba.Abs.Expr -> Result
transExpr x = case x of
  Src.Jabba.Abs.EVarName ident -> failure x
  Src.Jabba.Abs.EIntLit integer -> failure x
  Src.Jabba.Abs.EBoolLitTrue -> failure x
  Src.Jabba.Abs.EBoolLitFalse -> failure x
  Src.Jabba.Abs.ERun ident exprs -> failure x
  Src.Jabba.Abs.EStringLit string -> failure x
  Src.Jabba.Abs.ENeg negop expr -> failure x
  Src.Jabba.Abs.ENot notop expr -> failure x
  Src.Jabba.Abs.EMul expr1 mulop expr2 -> failure x
  Src.Jabba.Abs.ESum expr1 plsop expr2 -> failure x
  Src.Jabba.Abs.ERel expr1 relop expr2 -> failure x
  Src.Jabba.Abs.EBAnd expr1 andop expr2 -> failure x
  Src.Jabba.Abs.EBOr expr1 orop expr2 -> failure x
  Src.Jabba.Abs.ETer expr1 expr2 expr3 -> failure x
