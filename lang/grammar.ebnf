
-- Declarations -------------------------------------------

RefArg.         Arg ::= Ident ":" Type;

CopyArg.        Arg ::= "new" Ident ":" Type ;

separator       Arg "," ;

DVar.           Decl ::= "var" Ident ":" Type "=" Expr ";" ;

DVal.           Decl ::= "val" Ident ":" Type "=" Expr ";" ;

DSingle.        Decl ::= "lateval" Ident ":" Type ";" ;

DFun.           Decl ::= "fun" Ident "(" [Arg] ")" ":" Type Block ;

-- Instructions -------------------------------------------

Block.          Block ::= "{" [Instr] "}" ;

IUnit.          Instr ::= ";" ;

IBlock.         Instr ::= Block ;

IRet.           Instr ::= "return" Expr ";" ;

IRetAfter.      Instr ::= "return" Expr "also" Block ";" ;

IRetUnit.       Instr ::= "return" ";" ;

IIf.            Instr ::= "if" Expr Block ";" ;

IIfElse.        Instr ::= "if" Expr Block "else" Block ";" ;

IWhile.         Instr ::= "while" Expr Block ";" ;

IWhileEnd.      Instr ::= "while" Expr Block "finally" Block;

IFor.           Instr ::= "for" Ident "=" Expr ".." Expr ;

-- Types --------------------------------------------------

TInt.           Type ::= "Integer" ;

TBool.          Type ::= "Boolean" ;

TString.        Type ::= "String" ;

TVoid.          Type ::= "Unit" ;

TFun.           Type ::= "(" [Type] ")" ":" Type ;

separator       Type "," ;

-- Operators ----------------------------------------------

OPlus.          PlsOp ::= "+" ;

OMinus.         MinOp ::= "-" ;

OMul.           MulOp ::= "*" ;

ODiv.           DivOp ::= "/" ;

OMod.           ModOp ::= "%" ;

OPow.           PowOp ::= "^" ;

ONot.           NotOp ::= "!" ;

ONeg.           NegOp ::= "-" ;

OAnd.           AndOp ::= "&&" ;

OOr.            OrOp  ::= "||" ;

OXor.           XorOp ::= "^^" ;

-- Equality -----------------------------------------------

REq.            RelOp ::= "==" ;

RNeq.           RelOp ::= "!=" ;

-- Relations ----------------------------------------------

RLt.            RelOp ::= "<" ;

RGt.            RelOp ::= ">" ;

RLeq.           RelOp ::= "<=" ;

RGeq.           RelOp ::= ">=" ;

-- Expressions --------------------------------------------

EVarName.       Expr8 ::= Ident ;

EIntLit.        Expr8 ::= Integer ;

EBoolLitTrue.   Expr8 ::= "true" | "True" ;

EBoolLitFalse.  Expr8 ::= "false" | "False" ;

EStringLit.     Expr8 ::= String ;

ERun.           Expr8 ::= Expr "(" [Expr] ")" ;

EPow.           Expr7 ::= Expr PowOp Expr ;

ENeg.           Expr7 ::= NegOp Expr ;

ENot.           Expr7 ::= NotOp Expr ;

EMul.           Expr6 ::= Expr MulOp Expr ;

EDiv.           Expr6 ::= Expr DivOp Expr ;

ESum.           Expr5 ::= Expr PlsOp Expr ;

ESub.           Expr5 ::= Expr MinOp Expr ;

EMod.           Expr4 ::= Expr ModOp Expr ;

ERel.           Expr3 ::= Expr RelOp Expr ;

EBAnd.          Expr2 ::= Expr AndOp Expr ;

EBOr.           Expr1 ::= Expr OrOp Expr ;

EBXor.          Expr1 ::= Expr XorOp Expr ;

EAsgn.          Expr1 ::= Ident "=" Expr ;

EPPlusPost.     Expr1 ::= Ident "++" ;

EMMinusPost.    Expr1 ::= Ident "--" ;

EPPlusPre.      Expr1 ::= "++" Ident ;

EMMinusPre.     Expr1 ::= "--" Ident ;


coercions       Expr 8 ;

separator       Expr "," ;

-- Comments -----------------------------------------------

comment         "#" ;
comment         "#*" "*#" ;


